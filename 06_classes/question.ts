/*

問題1

ユーザー情報を管理するクラスを作成してください：

1. User クラスを作成し、以下の要素を含めてください：
   - プライベートプロパティ: _id（number型）、_name（string型）、_email（string型）
   - コンストラクタ: id、name、email を受け取って初期化
   - ゲッター: id、name、email を取得するメソッド
   - メソッド: getInfo() - ユーザー情報を文字列で返す

2. User クラスのインスタンスを2つ作成してください

3. getInfo() メソッドを使って、各ユーザー情報をコンソールに出力してください

ヒント: `class` を使うと、データとメソッドをまとめて管理できます。

*/

/*

問題2

継承を使ってクラスを拡張してください：

1. Animal クラスを作成し、以下の要素を含めてください：
   - プロテクトプロパティ: name（string型）、age（number型）
   - コンストラクタ: name、age を受け取って初期化
   - メソッド: getInfo() - 動物情報を文字列で返す

2. Dog クラスを作成し、Animal を継承してください：
   - プライベートプロパティ: breed（string型、犬種）
   - コンストラクタ: name、age、breed を受け取って初期化（super を使用）
   - メソッド: bark() - "Woof! Woof!" を返す
   - オーバーライド: getInfo() - 親クラスの情報に犬種を追加して返す

3. Dogクラスのインスタンスを作成し、getInfo() と bark() を実行してコンソールに出力してください

*/

/*

問題3

静的メソッドとプロパティを使ってください：

1. MathUtils クラスを作成し、以下の要素を含めてください：
   - 静的プロパティ: PI（number型、3.14159）
   - 静的メソッド: add(a: number, b: number) - 2つの数値を足す
   - 静的メソッド: multiply(a: number, b: number) - 2つの数値を掛ける
   - 静的メソッド: circleArea(radius: number) - 円の面積を計算（PI を使用）

2. インスタンスを作成せずに、各静的メソッドを呼び出してテストしてください

3. 結果をコンソールに出力してください

*/